import type { Project as ProjectType } from '../App'
import CircularText from './CircleText'
import { useEffect, useRef, useState } from 'react'
import Project from './Project'
import { useGlobal } from '../context/useGlobal'

type ProjectsProps = {
  description: string
  projects: ProjectType[]
}

export default function Projects({ projects, description }: ProjectsProps) {
  const { language } = useGlobal()

  // üîπ ref –Ω–∞ –í–ï–°–¨ –±–ª–æ–∫ —Å–µ–∫—Ü–∏–∏ (–¥–ª—è —Å–º–µ–Ω—ã —Ñ–æ–Ω–∞ body)
  const containerRef = useRef<HTMLDivElement>(null)

  // üîπ –æ—Ç–¥–µ–ª—å–Ω—ã–π ref –Ω–∞ —à–∞–ø–∫—É (–¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è)
  const headerRef = useRef<HTMLDivElement>(null)
  const [visible, setVisible] = useState(false)

  const projectRefs = useRef<(HTMLDivElement | null)[]>([])
  const [visibleProjects, setVisibleProjects] = useState<boolean[]>(
    Array(projects.length).fill(false)
  )

  // === –§–æ–Ω body –∑–µ–ª—ë–Ω—ã–π, –ø–æ–∫–∞ –õ–Æ–ë–ê–Ø —á–∞—Å—Ç—å —Å–µ–∫—Ü–∏–∏ Projects –≤–∏–¥–Ω–∞ ===
  useEffect(() => {
    const handleScroll = () => {
      if (!containerRef.current) return
      const rect = containerRef.current.getBoundingClientRect()

      const offsetTop = 500 // –≤–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω —á—É—Ç—å —Ä–∞–Ω—å—à–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
      const offsetBottom = 300 // –≤—ã–∫–ª—é—á–∞–µ–º —Ñ–æ–Ω —á—É—Ç—å –ø–æ–∑–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã

      if (rect.top <= offsetTop && rect.bottom >= offsetBottom) {
        document.body.classList.add('projects-bg')
      } else {
        document.body.classList.remove('projects-bg')
      }
    }

    window.addEventListener('scroll', handleScroll)
    handleScroll() // –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ

    return () => {
      window.removeEventListener('scroll', handleScroll)
      document.body.classList.remove('projects-bg')
    }
  }, [])

  // === –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —à–∞–ø–∫–∏ (–æ–¥–∏–Ω —Ä–∞–∑) ===
  useEffect(() => {
    if (!headerRef.current) return

    const io = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setVisible(true)
          io.disconnect()
        }
      },
      {
        threshold: 0, // –ª–æ–≤–∏–º –∫–æ–≥–¥–∞ 10% –±–ª–æ–∫–∞ –≤–∏–¥–Ω–æ
        rootMargin: '0px 0px -100px 0px', // —Å—Ç–∞—Ä—Ç —á—É—Ç—å —Ä–∞–Ω—å—à–µ
      }
    )

    io.observe(headerRef.current)

    return () => io.disconnect()
  }, [])

  // === –ü–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤ –ø–æ –º–µ—Ä–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ ===
  useEffect(() => {
    const io = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const index = Number(entry.target.getAttribute('data-index'))
          if (entry.isIntersecting) {
            setVisibleProjects((prev) => {
              const next = [...prev]
              next[index] = true
              return next
            })
            io.unobserve(entry.target)
          }
        })
      },
      { threshold: 0.2 }
    )

    projectRefs.current.forEach((el) => el && io.observe(el))
    return () => io.disconnect()
  }, [projects])

  return (
    <div ref={containerRef} className="projects-container">
      <div ref={headerRef} className={visible ? 'slide-up' : 'hidden'}>
        <div className="description-flex-container">
          <div className="description">{description}</div>
          <div className="scrolldown-wrapper" style={{ fontWeight: 300 }}>
            <CircularText
              text={
                language === 'en'
                  ? 'scroll down > scroll down > scroll down >'
                  : '–µ—â—ë –≤–Ω–∏–∑ >> –µ—â—ë –≤–Ω–∏–∑ >> –µ—â—ë –≤–Ω–∏–∑ >>'
              }
              radius={62}
            />
            <span className="emoji-pointer">üëà</span>
          </div>
        </div>
      </div>

      <div className="projects">
        {projects.map((project, index) => (
          <div
            key={index}
            data-index={index}
            ref={(el) => {
              projectRefs.current[index] = el
            }}
            className={`project-wrapper ${
              visibleProjects[index] ? 'fade-in' : 'hidden'
            }`}
          >
            <Project project={project} />
          </div>
        ))}
      </div>

      <button
        type="button"
        className="allProjectsButton"
        onClick={() => window.open('https://github.com/vkuznets23', '_blank')}
      >
        {language === 'en'
          ? 'Check out all projects at GitHub'
          : '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–∞ GitHub'}
      </button>
    </div>
  )
}
